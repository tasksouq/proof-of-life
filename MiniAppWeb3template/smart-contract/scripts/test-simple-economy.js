const { ethers } = require("hardhat");

async function testSimpleEconomy() {
    console.log("\nüß™ Testing Simple Economy Contract...\n");

    // Get contract addresses from deployment info
    const deploymentInfo = require('./production-deployment.json');
    console.log("üìÑ Using deployment addresses:");
    console.log("  üèóÔ∏è  Economy:", deploymentInfo.contracts.economy);
    console.log("  ü™ô LIFE Token:", deploymentInfo.contracts.life);
    console.log("  üè† Property:", deploymentInfo.contracts.property);

    // Connect to contracts
    const [owner] = await ethers.getSigners();
    console.log(`üë§ Testing with account: ${owner.address}`);

    const Economy = await ethers.getContractAt("Economy", deploymentInfo.contracts.economy);
    const LifeToken = await ethers.getContractAt("LIFE", deploymentInfo.contracts.life);
    const Property = await ethers.getContractAt("Property", deploymentInfo.contracts.property);

    try {
        // Test 1: Check basic contract functions
        console.log("\n=== Test 1: Basic Contract Functions ===");
        
        const housePrice = await Economy.getPropertyPrice("house");
        console.log(`üè† House price: ${ethers.formatEther(housePrice.lifePrice)} LIFE`);
        console.log(`üè† House price: ${ethers.formatEther(housePrice.wldPrice)} WLD`);
        console.log(`üè† House active: ${housePrice.isActive}`);
        
        const wldToLife = await Economy.convertWldToLife(ethers.parseEther("1"));
        console.log(`üí± 1 WLD = ${ethers.formatEther(wldToLife)} LIFE`);
        
        // Test 2: Check user balances
        console.log("\n=== Test 2: User Balances ===");
        
        const lifeBalance = await LifeToken.balanceOf(owner.address);
        console.log(`ü™ô LIFE Balance: ${ethers.formatEther(lifeBalance)} LIFE`);
        
        const hasWorldID = await LifeToken.hasReceivedSigningBonus(owner.address);
        console.log(`üÜî Has World ID: ${hasWorldID}`);
        
        if (hasWorldID) {
            const checkIns = await LifeToken.getLifetimeCheckIns(owner.address);
            console.log(`üìÖ Lifetime check-ins: ${checkIns.toString()}`);
        }

        // Test 3: Property purchase simulation
        console.log("\n=== Test 3: Property Purchase Simulation ===");
        
        const userLifeBalance = await LifeToken.balanceOf(owner.address);
        const requiredLife = housePrice.lifePrice; // Level 1 house
        
        console.log(`üí∞ Required for house: ${ethers.formatEther(requiredLife)} LIFE`);
        console.log(`üí∞ User balance: ${ethers.formatEther(userLifeBalance)} LIFE`);
        
        if (userLifeBalance >= requiredLife) {
            console.log(`‚úÖ User can afford a house purchase!`);
            
            // Check current properties owned
            const userProperties = await Property.balanceOf(owner.address);
            console.log(`üè† Properties owned: ${userProperties.toString()}`);
            
            console.log(`üí° You can test purchasing by calling:`);
            console.log(`   Economy.purchaseProperty("house", "My House", "Virtual City", 1, false, "")`);
            
        } else {
            console.log(`‚ùå Insufficient LIFE balance for house purchase`);
            const needed = requiredLife - userLifeBalance;
            console.log(`üí° Need ${ethers.formatEther(needed)} more LIFE`);
            console.log(`üí° Claim daily LIFE tokens to build up balance`);
        }

        // Test 4: Income generation settings
        console.log("\n=== Test 4: Income Generation Settings ===");
        
        const baseIncomeRate = await Economy.baseIncomeRate();
        const holdingBonusRate = await Economy.holdingBonusRate();
        const maxHoldingBonus = await Economy.maxHoldingBonus();
        
        console.log(`üìà Income Settings:`);
        console.log(`   ‚Ä¢ Base rate: ${ethers.formatEther(baseIncomeRate)} LIFE/day`);
        console.log(`   ‚Ä¢ Holding bonus: ${holdingBonusRate.toString()}bps per day`);
        console.log(`   ‚Ä¢ Max holding bonus: ${maxHoldingBonus.toString()}bps (${(Number(maxHoldingBonus) / 100).toFixed(1)}%)`);

        // Test 5: Purchase tracking
        console.log("\n=== Test 5: Purchase History ===");
        
        const totalPurchases = await Economy.totalPurchases(owner.address);
        const totalLifeSpent = await Economy.totalSpentLife(owner.address);
        const totalWldSpent = await Economy.totalSpentWld(owner.address);
        const totalIncomeEarned = await Economy.totalIncomeEarned(owner.address);
        
        console.log(`üìä Purchase Stats:`);
        console.log(`   ‚Ä¢ Total purchases: ${totalPurchases.toString()}`);
        console.log(`   ‚Ä¢ Total LIFE spent: ${ethers.formatEther(totalLifeSpent)} LIFE`);
        console.log(`   ‚Ä¢ Total WLD spent: ${ethers.formatEther(totalWldSpent)} WLD`);
        console.log(`   ‚Ä¢ Total income earned: ${ethers.formatEther(totalIncomeEarned)} LIFE`);

        // Test 6: Property types and pricing
        console.log("\n=== Test 6: All Property Types ===");
        
        const propertyTypes = ["house", "apartment", "office", "land", "mansion"];
        
        for (const propertyType of propertyTypes) {
            try {
                const price = await Economy.getPropertyPrice(propertyType);
                console.log(`üèóÔ∏è  ${propertyType.toUpperCase()}:`);
                console.log(`   ‚Ä¢ LIFE: ${ethers.formatEther(price.lifePrice)} LIFE`);
                console.log(`   ‚Ä¢ WLD: ${ethers.formatEther(price.wldPrice)} WLD`);
                console.log(`   ‚Ä¢ Active: ${price.isActive}`);
                
                // Calculate level 5 pricing
                const level5Multiplier = 100 + (5 - 1) * 20; // 180%
                const level5Price = (price.lifePrice * BigInt(level5Multiplier)) / BigInt(100);
                console.log(`   ‚Ä¢ Level 5: ${ethers.formatEther(level5Price)} LIFE`);
                
            } catch (error) {
                console.log(`‚ùå Error checking ${propertyType}: ${error.message}`);
            }
        }

        console.log("\nüéâ Simple Economy Test Complete!");
        console.log("\nüìã Summary:");
        console.log("‚úÖ Contract deployed and functional");
        console.log("‚úÖ Property pricing system working");
        console.log("‚úÖ Level-based multipliers active");
        console.log("‚úÖ Income generation system configured");
        console.log("‚úÖ Purchase tracking operational");
        console.log("‚úÖ Multiple property types available");
        
        console.log("\nüéÆ How to Use:");
        console.log("1. ü™ô Ensure you have LIFE tokens (claim daily)");
        console.log("2. üè† Choose a property type and level");
        console.log("3. üí∞ Purchase with LIFE or WLD tokens");
        console.log("4. ‚è∞ Wait 24+ hours for yield generation");
        console.log("5. üíé Claim your yield rewards");
        console.log("6. üîÑ Repeat to build your property portfolio!");

        return {
            contractAddress: deploymentInfo.contracts.economy,
            userBalance: ethers.formatEther(userLifeBalance),
            canAffordHouse: userLifeBalance >= requiredLife,
            housePrice: ethers.formatEther(requiredLife)
        };

    } catch (error) {
        console.error("‚ùå Test failed:", error);
        throw error;
    }
}

// Run the test
if (require.main === module) {
    testSimpleEconomy()
        .then((result) => {
            console.log("\n‚úÖ All tests passed!");
            console.log(`üí∞ Your LIFE balance: ${result.userBalance} LIFE`);
            console.log(`üè† House costs: ${result.housePrice} LIFE`);
            console.log(`üí∏ Can afford house: ${result.canAffordHouse ? '‚úÖ Yes' : '‚ùå No'}`);
            process.exit(0);
        })
        .catch((error) => {
            console.error("‚ùå Tests failed:", error);
            process.exit(1);
        });
}

module.exports = { testSimpleEconomy };
