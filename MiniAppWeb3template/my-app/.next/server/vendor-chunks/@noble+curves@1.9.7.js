"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@noble+curves@1.9.7";
exports.ids = ["vendor-chunks/@noble+curves@1.9.7"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@noble+curves@1.9.7/node_modules/@noble/curves/esm/abstract/utils.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@noble+curves@1.9.7/node_modules/@noble/curves/esm/abstract/utils.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   aInRange: () => (/* binding */ aInRange),\n/* harmony export */   abool: () => (/* binding */ abool),\n/* harmony export */   abytes: () => (/* binding */ abytes),\n/* harmony export */   anumber: () => (/* binding */ anumber),\n/* harmony export */   asciiToBytes: () => (/* binding */ asciiToBytes),\n/* harmony export */   bitGet: () => (/* binding */ bitGet),\n/* harmony export */   bitLen: () => (/* binding */ bitLen),\n/* harmony export */   bitMask: () => (/* binding */ bitMask),\n/* harmony export */   bitSet: () => (/* binding */ bitSet),\n/* harmony export */   bytesToHex: () => (/* binding */ bytesToHex),\n/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),\n/* harmony export */   bytesToNumberLE: () => (/* binding */ bytesToNumberLE),\n/* harmony export */   bytesToUtf8: () => (/* binding */ bytesToUtf8),\n/* harmony export */   concatBytes: () => (/* binding */ concatBytes),\n/* harmony export */   copyBytes: () => (/* binding */ copyBytes),\n/* harmony export */   createHmacDrbg: () => (/* binding */ createHmacDrbg),\n/* harmony export */   ensureBytes: () => (/* binding */ ensureBytes),\n/* harmony export */   equalBytes: () => (/* binding */ equalBytes),\n/* harmony export */   hexToBytes: () => (/* binding */ hexToBytes),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   inRange: () => (/* binding */ inRange),\n/* harmony export */   isBytes: () => (/* binding */ isBytes),\n/* harmony export */   isHash: () => (/* binding */ isHash),\n/* harmony export */   memoized: () => (/* binding */ memoized),\n/* harmony export */   notImplemented: () => (/* binding */ notImplemented),\n/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),\n/* harmony export */   numberToBytesLE: () => (/* binding */ numberToBytesLE),\n/* harmony export */   numberToHexUnpadded: () => (/* binding */ numberToHexUnpadded),\n/* harmony export */   numberToVarBytesBE: () => (/* binding */ numberToVarBytesBE),\n/* harmony export */   randomBytes: () => (/* binding */ randomBytes),\n/* harmony export */   utf8ToBytes: () => (/* binding */ utf8ToBytes),\n/* harmony export */   validateObject: () => (/* binding */ validateObject)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ \"(ssr)/./node_modules/.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ \"(ssr)/./node_modules/.pnpm/@noble+curves@1.9.7/node_modules/@noble/curves/esm/utils.js\");\n/**\n * Deprecated module: moved from curves/abstract/utils.js to curves/utils.js\n * @module\n */\n\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst abytes = _utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst anumber = _utils_js__WEBPACK_IMPORTED_MODULE_0__.anumber;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst bytesToHex = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst bytesToUtf8 = _utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUtf8;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst concatBytes = _utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst hexToBytes = _utils_js__WEBPACK_IMPORTED_MODULE_0__.hexToBytes;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst isBytes = _utils_js__WEBPACK_IMPORTED_MODULE_0__.isBytes;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst randomBytes = _utils_js__WEBPACK_IMPORTED_MODULE_0__.randomBytes;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst utf8ToBytes = _utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst abool = _utils_js__WEBPACK_IMPORTED_MODULE_1__.abool;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst numberToHexUnpadded = _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToHexUnpadded;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst hexToNumber = _utils_js__WEBPACK_IMPORTED_MODULE_1__.hexToNumber;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst bytesToNumberBE = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberBE;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst bytesToNumberLE = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bytesToNumberLE;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst numberToBytesBE = _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesBE;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst numberToBytesLE = _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToBytesLE;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst numberToVarBytesBE = _utils_js__WEBPACK_IMPORTED_MODULE_1__.numberToVarBytesBE;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst ensureBytes = _utils_js__WEBPACK_IMPORTED_MODULE_1__.ensureBytes;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst equalBytes = _utils_js__WEBPACK_IMPORTED_MODULE_1__.equalBytes;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst copyBytes = _utils_js__WEBPACK_IMPORTED_MODULE_1__.copyBytes;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst asciiToBytes = _utils_js__WEBPACK_IMPORTED_MODULE_1__.asciiToBytes;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst inRange = _utils_js__WEBPACK_IMPORTED_MODULE_1__.inRange;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst aInRange = _utils_js__WEBPACK_IMPORTED_MODULE_1__.aInRange;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst bitLen = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bitLen;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst bitGet = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bitGet;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst bitSet = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bitSet;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst bitMask = _utils_js__WEBPACK_IMPORTED_MODULE_1__.bitMask;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst createHmacDrbg = _utils_js__WEBPACK_IMPORTED_MODULE_1__.createHmacDrbg;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst notImplemented = _utils_js__WEBPACK_IMPORTED_MODULE_1__.notImplemented;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst memoized = _utils_js__WEBPACK_IMPORTED_MODULE_1__.memoized;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst validateObject = _utils_js__WEBPACK_IMPORTED_MODULE_1__.validateObject;\n/** @deprecated moved to `@noble/curves/utils.js` */\nconst isHash = _utils_js__WEBPACK_IMPORTED_MODULE_1__.isHash;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQG5vYmxlK2N1cnZlc0AxLjkuNy9ub2RlX21vZHVsZXMvQG5vYmxlL2N1cnZlcy9lc20vYWJzdHJhY3QvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ2lDO0FBQ2pDO0FBQ08sZUFBZSw2Q0FBUTtBQUM5QjtBQUNPLGdCQUFnQiw4Q0FBUztBQUNoQztBQUNPLG1CQUFtQixpREFBWTtBQUN0QztBQUNPLG9CQUFvQixrREFBYTtBQUN4QztBQUNPLG9CQUFvQixrREFBYTtBQUN4QztBQUNPLG1CQUFtQixpREFBWTtBQUN0QztBQUNPLGdCQUFnQiw4Q0FBUztBQUNoQztBQUNPLG9CQUFvQixrREFBYTtBQUN4QztBQUNPLG9CQUFvQixrREFBYTtBQUN4QztBQUNPLGNBQWMsNENBQU87QUFDNUI7QUFDTyw0QkFBNEIsMERBQXFCO0FBQ3hEO0FBQ08sb0JBQW9CLGtEQUFhO0FBQ3hDO0FBQ08sd0JBQXdCLHNEQUFpQjtBQUNoRDtBQUNPLHdCQUF3QixzREFBaUI7QUFDaEQ7QUFDTyx3QkFBd0Isc0RBQWlCO0FBQ2hEO0FBQ08sd0JBQXdCLHNEQUFpQjtBQUNoRDtBQUNPLDJCQUEyQix5REFBb0I7QUFDdEQ7QUFDTyxvQkFBb0Isa0RBQWE7QUFDeEM7QUFDTyxtQkFBbUIsaURBQVk7QUFDdEM7QUFDTyxrQkFBa0IsZ0RBQVc7QUFDcEM7QUFDTyxxQkFBcUIsbURBQWM7QUFDMUM7QUFDTyxnQkFBZ0IsOENBQVM7QUFDaEM7QUFDTyxpQkFBaUIsK0NBQVU7QUFDbEM7QUFDTyxlQUFlLDZDQUFRO0FBQzlCO0FBQ08sZUFBZSw2Q0FBUTtBQUM5QjtBQUNPLGVBQWUsNkNBQVE7QUFDOUI7QUFDTyxnQkFBZ0IsOENBQVM7QUFDaEM7QUFDTyx1QkFBdUIscURBQWdCO0FBQzlDO0FBQ08sdUJBQXVCLHFEQUFnQjtBQUM5QztBQUNPLGlCQUFpQiwrQ0FBVTtBQUNsQztBQUNPLHVCQUF1QixxREFBZ0I7QUFDOUM7QUFDTyxlQUFlLDZDQUFRO0FBQzlCIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEFkbWluLk1PSEFNTUVELVBDXFxEb2N1bWVudHNcXGxpZmVcXE1pbmlBcHBXZWIzdGVtcGxhdGVcXG15LWFwcFxcbm9kZV9tb2R1bGVzXFwucG5wbVxcQG5vYmxlK2N1cnZlc0AxLjkuN1xcbm9kZV9tb2R1bGVzXFxAbm9ibGVcXGN1cnZlc1xcZXNtXFxhYnN0cmFjdFxcdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEZXByZWNhdGVkIG1vZHVsZTogbW92ZWQgZnJvbSBjdXJ2ZXMvYWJzdHJhY3QvdXRpbHMuanMgdG8gY3VydmVzL3V0aWxzLmpzXG4gKiBAbW9kdWxlXG4gKi9cbmltcG9ydCAqIGFzIHUgZnJvbSBcIi4uL3V0aWxzLmpzXCI7XG4vKiogQGRlcHJlY2F0ZWQgbW92ZWQgdG8gYEBub2JsZS9jdXJ2ZXMvdXRpbHMuanNgICovXG5leHBvcnQgY29uc3QgYWJ5dGVzID0gdS5hYnl0ZXM7XG4vKiogQGRlcHJlY2F0ZWQgbW92ZWQgdG8gYEBub2JsZS9jdXJ2ZXMvdXRpbHMuanNgICovXG5leHBvcnQgY29uc3QgYW51bWJlciA9IHUuYW51bWJlcjtcbi8qKiBAZGVwcmVjYXRlZCBtb3ZlZCB0byBgQG5vYmxlL2N1cnZlcy91dGlscy5qc2AgKi9cbmV4cG9ydCBjb25zdCBieXRlc1RvSGV4ID0gdS5ieXRlc1RvSGV4O1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IGJ5dGVzVG9VdGY4ID0gdS5ieXRlc1RvVXRmODtcbi8qKiBAZGVwcmVjYXRlZCBtb3ZlZCB0byBgQG5vYmxlL2N1cnZlcy91dGlscy5qc2AgKi9cbmV4cG9ydCBjb25zdCBjb25jYXRCeXRlcyA9IHUuY29uY2F0Qnl0ZXM7XG4vKiogQGRlcHJlY2F0ZWQgbW92ZWQgdG8gYEBub2JsZS9jdXJ2ZXMvdXRpbHMuanNgICovXG5leHBvcnQgY29uc3QgaGV4VG9CeXRlcyA9IHUuaGV4VG9CeXRlcztcbi8qKiBAZGVwcmVjYXRlZCBtb3ZlZCB0byBgQG5vYmxlL2N1cnZlcy91dGlscy5qc2AgKi9cbmV4cG9ydCBjb25zdCBpc0J5dGVzID0gdS5pc0J5dGVzO1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IHJhbmRvbUJ5dGVzID0gdS5yYW5kb21CeXRlcztcbi8qKiBAZGVwcmVjYXRlZCBtb3ZlZCB0byBgQG5vYmxlL2N1cnZlcy91dGlscy5qc2AgKi9cbmV4cG9ydCBjb25zdCB1dGY4VG9CeXRlcyA9IHUudXRmOFRvQnl0ZXM7XG4vKiogQGRlcHJlY2F0ZWQgbW92ZWQgdG8gYEBub2JsZS9jdXJ2ZXMvdXRpbHMuanNgICovXG5leHBvcnQgY29uc3QgYWJvb2wgPSB1LmFib29sO1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IG51bWJlclRvSGV4VW5wYWRkZWQgPSB1Lm51bWJlclRvSGV4VW5wYWRkZWQ7XG4vKiogQGRlcHJlY2F0ZWQgbW92ZWQgdG8gYEBub2JsZS9jdXJ2ZXMvdXRpbHMuanNgICovXG5leHBvcnQgY29uc3QgaGV4VG9OdW1iZXIgPSB1LmhleFRvTnVtYmVyO1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IGJ5dGVzVG9OdW1iZXJCRSA9IHUuYnl0ZXNUb051bWJlckJFO1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IGJ5dGVzVG9OdW1iZXJMRSA9IHUuYnl0ZXNUb051bWJlckxFO1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IG51bWJlclRvQnl0ZXNCRSA9IHUubnVtYmVyVG9CeXRlc0JFO1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IG51bWJlclRvQnl0ZXNMRSA9IHUubnVtYmVyVG9CeXRlc0xFO1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IG51bWJlclRvVmFyQnl0ZXNCRSA9IHUubnVtYmVyVG9WYXJCeXRlc0JFO1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IGVuc3VyZUJ5dGVzID0gdS5lbnN1cmVCeXRlcztcbi8qKiBAZGVwcmVjYXRlZCBtb3ZlZCB0byBgQG5vYmxlL2N1cnZlcy91dGlscy5qc2AgKi9cbmV4cG9ydCBjb25zdCBlcXVhbEJ5dGVzID0gdS5lcXVhbEJ5dGVzO1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IGNvcHlCeXRlcyA9IHUuY29weUJ5dGVzO1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IGFzY2lpVG9CeXRlcyA9IHUuYXNjaWlUb0J5dGVzO1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IGluUmFuZ2UgPSB1LmluUmFuZ2U7XG4vKiogQGRlcHJlY2F0ZWQgbW92ZWQgdG8gYEBub2JsZS9jdXJ2ZXMvdXRpbHMuanNgICovXG5leHBvcnQgY29uc3QgYUluUmFuZ2UgPSB1LmFJblJhbmdlO1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IGJpdExlbiA9IHUuYml0TGVuO1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IGJpdEdldCA9IHUuYml0R2V0O1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IGJpdFNldCA9IHUuYml0U2V0O1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IGJpdE1hc2sgPSB1LmJpdE1hc2s7XG4vKiogQGRlcHJlY2F0ZWQgbW92ZWQgdG8gYEBub2JsZS9jdXJ2ZXMvdXRpbHMuanNgICovXG5leHBvcnQgY29uc3QgY3JlYXRlSG1hY0RyYmcgPSB1LmNyZWF0ZUhtYWNEcmJnO1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IG5vdEltcGxlbWVudGVkID0gdS5ub3RJbXBsZW1lbnRlZDtcbi8qKiBAZGVwcmVjYXRlZCBtb3ZlZCB0byBgQG5vYmxlL2N1cnZlcy91dGlscy5qc2AgKi9cbmV4cG9ydCBjb25zdCBtZW1vaXplZCA9IHUubWVtb2l6ZWQ7XG4vKiogQGRlcHJlY2F0ZWQgbW92ZWQgdG8gYEBub2JsZS9jdXJ2ZXMvdXRpbHMuanNgICovXG5leHBvcnQgY29uc3QgdmFsaWRhdGVPYmplY3QgPSB1LnZhbGlkYXRlT2JqZWN0O1xuLyoqIEBkZXByZWNhdGVkIG1vdmVkIHRvIGBAbm9ibGUvY3VydmVzL3V0aWxzLmpzYCAqL1xuZXhwb3J0IGNvbnN0IGlzSGFzaCA9IHUuaXNIYXNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@noble+curves@1.9.7/node_modules/@noble/curves/esm/abstract/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@noble+curves@1.9.7/node_modules/@noble/curves/esm/utils.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/@noble+curves@1.9.7/node_modules/@noble/curves/esm/utils.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _abool2: () => (/* binding */ _abool2),\n/* harmony export */   _abytes2: () => (/* binding */ _abytes2),\n/* harmony export */   _validateObject: () => (/* binding */ _validateObject),\n/* harmony export */   aInRange: () => (/* binding */ aInRange),\n/* harmony export */   abool: () => (/* binding */ abool),\n/* harmony export */   abytes: () => (/* reexport safe */ _noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes),\n/* harmony export */   anumber: () => (/* reexport safe */ _noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.anumber),\n/* harmony export */   asciiToBytes: () => (/* binding */ asciiToBytes),\n/* harmony export */   bitGet: () => (/* binding */ bitGet),\n/* harmony export */   bitLen: () => (/* binding */ bitLen),\n/* harmony export */   bitMask: () => (/* binding */ bitMask),\n/* harmony export */   bitSet: () => (/* binding */ bitSet),\n/* harmony export */   bytesToHex: () => (/* reexport safe */ _noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex),\n/* harmony export */   bytesToNumberBE: () => (/* binding */ bytesToNumberBE),\n/* harmony export */   bytesToNumberLE: () => (/* binding */ bytesToNumberLE),\n/* harmony export */   bytesToUtf8: () => (/* reexport safe */ _noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToUtf8),\n/* harmony export */   concatBytes: () => (/* reexport safe */ _noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes),\n/* harmony export */   copyBytes: () => (/* binding */ copyBytes),\n/* harmony export */   createHmacDrbg: () => (/* binding */ createHmacDrbg),\n/* harmony export */   ensureBytes: () => (/* binding */ ensureBytes),\n/* harmony export */   equalBytes: () => (/* binding */ equalBytes),\n/* harmony export */   hexToBytes: () => (/* reexport safe */ _noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.hexToBytes),\n/* harmony export */   hexToNumber: () => (/* binding */ hexToNumber),\n/* harmony export */   inRange: () => (/* binding */ inRange),\n/* harmony export */   isBytes: () => (/* reexport safe */ _noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBytes),\n/* harmony export */   isHash: () => (/* binding */ isHash),\n/* harmony export */   memoized: () => (/* binding */ memoized),\n/* harmony export */   notImplemented: () => (/* binding */ notImplemented),\n/* harmony export */   numberToBytesBE: () => (/* binding */ numberToBytesBE),\n/* harmony export */   numberToBytesLE: () => (/* binding */ numberToBytesLE),\n/* harmony export */   numberToHexUnpadded: () => (/* binding */ numberToHexUnpadded),\n/* harmony export */   numberToVarBytesBE: () => (/* binding */ numberToVarBytesBE),\n/* harmony export */   randomBytes: () => (/* reexport safe */ _noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.randomBytes),\n/* harmony export */   utf8ToBytes: () => (/* reexport safe */ _noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.utf8ToBytes),\n/* harmony export */   validateObject: () => (/* binding */ validateObject)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/utils.js */ \"(ssr)/./node_modules/.pnpm/@noble+hashes@1.8.0/node_modules/@noble/hashes/esm/utils.js\");\n/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nfunction abool(title, value) {\n    if (typeof value !== 'boolean')\n        throw new Error(title + ' boolean expected, got ' + value);\n}\n// tmp name until v2\nfunction _abool2(value, title = '') {\n    if (typeof value !== 'boolean') {\n        const prefix = title && `\"${title}\"`;\n        throw new Error(prefix + 'expected boolean, got type=' + typeof value);\n    }\n    return value;\n}\n// tmp name until v2\n/** Asserts something is Uint8Array. */\nfunction _abytes2(value, length, title = '') {\n    const bytes = (0,_noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBytes)(value);\n    const len = value?.length;\n    const needsLen = length !== undefined;\n    if (!bytes || (needsLen && len !== length)) {\n        const prefix = title && `\"${title}\" `;\n        const ofLen = needsLen ? ` of length ${length}` : '';\n        const got = bytes ? `length=${len}` : `type=${typeof value}`;\n        throw new Error(prefix + 'expected Uint8Array' + ofLen + ', got ' + got);\n    }\n    return value;\n}\n// Used in weierstrass, der\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? '0' + hex : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber((0,_noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(bytes));\n}\nfunction bytesToNumberLE(bytes) {\n    (0,_noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.abytes)(bytes);\n    return hexToNumber((0,_noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.bytesToHex)(Uint8Array.from(bytes).reverse()));\n}\nfunction numberToBytesBE(n, len) {\n    return (0,_noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(n.toString(16).padStart(len * 2, '0'));\n}\nfunction numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n    return (0,_noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(numberToHexUnpadded(n));\n}\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'secret key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nfunction ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = (0,_noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.hexToBytes)(hex);\n        }\n        catch (e) {\n            throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n        }\n    }\n    else if ((0,_noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBytes)(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(title + ' must be hex string or Uint8Array');\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n    return res;\n}\n// Compares 2 u8a-s in kinda constant time\nfunction equalBytes(a, b) {\n    if (a.length !== b.length)\n        return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++)\n        diff |= a[i] ^ b[i];\n    return diff === 0;\n}\n/**\n * Copies Uint8Array. We can't use u8a.slice(), because u8a can be Buffer,\n * and Buffer#slice creates mutable copy. Never use Buffers!\n */\nfunction copyBytes(bytes) {\n    return Uint8Array.from(bytes);\n}\n/**\n * Decodes 7-bit ASCII string to Uint8Array, throws on non-ascii symbols\n * Should be safe to use for things expected to be ASCII.\n * Returns exact same result as utf8ToBytes for ASCII or throws.\n */\nfunction asciiToBytes(ascii) {\n    return Uint8Array.from(ascii, (c, i) => {\n        const charCode = c.charCodeAt(0);\n        if (c.length !== 1 || charCode > 127) {\n            throw new Error(`string contains non-ASCII character \"${ascii[i]}\" with code ${charCode} at position ${i}`);\n        }\n        return charCode;\n    });\n}\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\n// export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\n// export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\n// Is positive bigint\nconst isPosBig = (n) => typeof n === 'bigint' && _0n <= n;\nfunction inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nfunction aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max))\n        throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n * TODO: merge with nLength in modular\n */\nfunction bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nfunction bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\n/**\n * Sets single bit at position.\n */\nfunction bitSet(n, pos, value) {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nconst bitMask = (n) => (_1n << BigInt(n)) - _1n;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    const u8n = (len) => new Uint8Array(len); // creates Uint8Array\n    const u8of = (byte) => Uint8Array.of(byte); // another shortcut\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n(0)) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return (0,_noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.concatBytes)(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || (0,_noble_hashes_utils_js__WEBPACK_IMPORTED_MODULE_0__.isBytes)(val),\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error('invalid validator function');\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\nfunction isHash(val) {\n    return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\n}\nfunction _validateObject(object, fields, optFields = {}) {\n    if (!object || typeof object !== 'object')\n        throw new Error('expected valid options object');\n    function checkField(fieldName, expectedType, isOpt) {\n        const val = object[fieldName];\n        if (isOpt && val === undefined)\n            return;\n        const current = typeof val;\n        if (current !== expectedType || val === null)\n            throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\n    }\n    Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\n    Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\n}\n/**\n * throws not implemented error\n */\nconst notImplemented = () => {\n    throw new Error('not implemented');\n};\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nfunction memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n        const val = map.get(arg);\n        if (val !== undefined)\n            return val;\n        const computed = fn(arg, ...args);\n        map.set(arg, computed);\n        return computed;\n    };\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@noble+curves@1.9.7/node_modules/@noble/curves/esm/utils.js\n");

/***/ })

};
;